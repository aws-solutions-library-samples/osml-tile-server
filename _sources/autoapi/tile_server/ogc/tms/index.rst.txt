tile_server.ogc.tms
===================

.. py:module:: tile_server.ogc.tms


Classes
-------

.. autoapisummary::

   tile_server.ogc.tms.BoundingBox2D
   tile_server.ogc.tms.TilePoint
   tile_server.ogc.tms.TileMatrixLimits
   tile_server.ogc.tms.TileSetItem
   tile_server.ogc.tms.TileSetList
   tile_server.ogc.tms.TileSetMetadata


Module Contents
---------------

.. py:class:: BoundingBox2D(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   A minimum bounding rectangle surrounding a 2D resource.


   .. py:attribute:: lower_left
      :type:  tuple[float, float]


   .. py:attribute:: upper_right
      :type:  tuple[float, float]


   .. py:attribute:: crs
      :type:  Optional[str]


.. py:class:: TilePoint(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   A specific tile location within a tileset.


   .. py:attribute:: coordinates
      :type:  tuple[float, float]


   .. py:attribute:: crs
      :type:  Optional[str]


   .. py:attribute:: tile_matrix
      :type:  Optional[str]


.. py:class:: TileMatrixLimits(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Limits for the tileRow and tileCol values within a tileMatrix in a tileset. This defines the boundary of a
   2D resource within a given tileset resolution level.


   .. py:attribute:: tile_matrix
      :type:  str


   .. py:attribute:: min_tile_row
      :type:  int


   .. py:attribute:: max_tile_row
      :type:  int


   .. py:attribute:: min_tile_col
      :type:  int


   .. py:attribute:: max_tile_col
      :type:  int


.. py:class:: TileSetItem(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   A minimal tileset element for use within a list of tilesets linking to full description of those tilesets.


   .. py:attribute:: title
      :type:  Optional[str]


   .. py:attribute:: data_type
      :type:  tile_server.ogc.common_geodata.DataType


   .. py:attribute:: links
      :type:  list[tile_server.ogc.common_core.Link]


   .. py:attribute:: crs
      :type:  str


   .. py:attribute:: tile_matrix_set_uri
      :type:  Optional[str]


.. py:class:: TileSetList(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Usage docs: https://docs.pydantic.dev/2.9/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of the class variables defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The core schema of the model.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
       __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
       __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

       __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
           is set to `'allow'`.
       __pydantic_fields_set__: The names of fields explicitly set during instantiation.
       __pydantic_private__: Values of private attributes set on the model instance.


   .. py:attribute:: tilesets
      :type:  list[TileSetItem]


   .. py:attribute:: links
      :type:  Optional[list[tile_server.ogc.common_core.Link]]


.. py:class:: TileSetMetadata(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Usage docs: https://docs.pydantic.dev/2.9/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of the class variables defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The core schema of the model.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
       __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
       __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

       __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
           is set to `'allow'`.
       __pydantic_fields_set__: The names of fields explicitly set during instantiation.
       __pydantic_private__: Values of private attributes set on the model instance.


   .. py:attribute:: title
      :type:  Optional[str]


   .. py:attribute:: description
      :type:  Optional[str]


   .. py:attribute:: data_type
      :type:  tile_server.ogc.common_geodata.DataType


   .. py:attribute:: crs
      :type:  str


   .. py:attribute:: tile_matrix_set_uri
      :type:  Optional[str]


   .. py:attribute:: links
      :type:  list[tile_server.ogc.common_core.Link]


   .. py:attribute:: tile_matrix_set_limits
      :type:  Optional[list[TileMatrixLimits]]


   .. py:attribute:: epoch
      :type:  Optional[float]


   .. py:attribute:: bounding_box
      :type:  Optional[BoundingBox2D]


   .. py:attribute:: center_point
      :type:  Optional[TilePoint]


