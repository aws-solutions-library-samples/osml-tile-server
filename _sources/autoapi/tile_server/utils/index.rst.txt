tile_server.utils
=================

.. py:module:: tile_server.utils


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/tile_server/utils/health_check/index
   /autoapi/tile_server/utils/log_tools/index
   /autoapi/tile_server/utils/string_enums/index
   /autoapi/tile_server/utils/tile_server_utils/index


Classes
-------

.. autoapisummary::

   tile_server.utils.HealthCheck
   tile_server.utils.ThreadingLocalContextFilter
   tile_server.utils.AutoLowerStringEnum
   tile_server.utils.AutoStringEnum
   tile_server.utils.AutoUnderscoreStringEnum
   tile_server.utils.TileFactoryPool


Functions
---------

.. autoapisummary::

   tile_server.utils.configure_logger
   tile_server.utils.get_media_type
   tile_server.utils.get_standard_overviews
   tile_server.utils.get_tile_factory_pool
   tile_server.utils.perform_gdal_translation


Package Contents
----------------

.. py:class:: HealthCheck(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   A Pydantic model for a health check response.

   Attributes:
       status (str): Status of the health check. Defaults is "OK".


   .. py:attribute:: status
      :type:  str
      :value: 'OK'



.. py:class:: ThreadingLocalContextFilter(attribute_names: List[str])

   Bases: :py:obj:`logging.Filter`


   This is a filter that injects contextual information into the log message. The contextual information is
   set using the static methods of this class.


   .. py:attribute:: attribute_names


   .. py:method:: filter(record: logging.LogRecord) -> bool

      This method is called for each log record. It injects the contextual information into the log record.

      :param record: the log record to filter
      :return: True, this filter does not exclude information from the log



   .. py:method:: set_context(context: Optional[dict]) -> None
      :staticmethod:


      Set the context for the current thread. If None all context information is cleared.

      :param context: dict = the context to set
      :return: None



.. py:function:: configure_logger(logger: logging.Logger, log_level: int, log_formatter: logging.Formatter = None, log_filter: logging.Filter = None) -> None

   Configure a given logger with the provided parameters.

   :param logger: An instance of the Logger to configure
   :param log_level: The log level to set
   :param log_formatter: The log formatter to set on all handlers
   :param log_filter: Log filter to apply to the logger
   :return: None


.. py:class:: AutoLowerStringEnum(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   A class to represent an Enum where the value of the Enum member is the lowercase version of the name associated with
   the Enum member.


   .. py:method:: _generate_next_value_(name, start, count, last_values) -> str
      :staticmethod:


      Function to iterate through the Enum members.

      :param: name: The name of the Enum member.
      :param: start: The initial integer.
      :param: count: The number of existing members.
      :param: last_values: The list of values associated with existing members.

      :return: The next value of the enumeration which is the lowercase version of the name.



.. py:class:: AutoStringEnum(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   A class used to represent an Enum where the value of the Enum member is the same as the name of the Enum member.


   .. py:method:: _generate_next_value_(name, start, count, last_values) -> str
      :staticmethod:


      Function to iterate through the Enum members.

      :param: name: Name of the Enum member.
      :param: start: Initial integer to start with.
      :param: count: Number of existing members.
      :param: last_values: List of values for existing members.

      :return: The next value of the enumeration which is the same as the name.



.. py:class:: AutoUnderscoreStringEnum(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   A class used to represent an Enum where the value of the Enum member is the name of the Enum member with
   underscores replaced with spaces.


   .. py:method:: _generate_next_value_(name, start, count, last_values) -> str
      :staticmethod:


      Function to iterate through the Enum members.

      :param: name: Name of the Enum member.
      :param: start: Initial integer to start with.
      :param: count: Number of existing members.
      :param: last_values: List of values of existing members.

      :return: Next value of enumeration which is the name of the Enum member with underscores replaced by spaces.



.. py:class:: TileFactoryPool(tile_format: aws.osml.gdal.GDALImageFormats, tile_compression: aws.osml.gdal.GDALCompressionOptions, local_object_path: str, output_type: Optional[int] = None, range_adjustment: aws.osml.gdal.RangeAdjustmentType = RangeAdjustmentType.NONE)

   Class representing a pool of GDALTileFactory objects.


   .. py:attribute:: lock


   .. py:attribute:: current_inventory
      :value: []



   .. py:attribute:: total_inventory
      :value: 0



   .. py:attribute:: tile_format


   .. py:attribute:: tile_compression


   .. py:attribute:: local_object_path


   .. py:attribute:: output_type


   .. py:attribute:: range_adjustment


   .. py:method:: checkout() -> aws.osml.image_processing.GDALTileFactory

      Handles the checkout process. If the current inventory is not empty,
      it pops out the first GDALTileFactory object. If the inventory is empty,
      a new GDALTileFactory object is created, added to the inventory, and returned.

      :return: Instance of the GDALTileFactory class.



   .. py:method:: checkin(tf: aws.osml.image_processing.GDALTileFactory) -> None

      Adds a GDALTileFactory object to the current inventory.

      :param tf: GDALTileFactory object to be checked in to the index.
      :return: None



   .. py:method:: checkout_in_context() -> None

      A context manager for using the `checkout` method in a `with` statement. Exception safe - resources are
      guaranteed to be `checkin`ed. It yields the resource obtained from `checkout` for use inside the `with`
      statement.
      :return: None
      :raise Exception: Any exceptions raised within the `with` block or by `checkout` and `checkin` methods



.. py:function:: get_media_type(tile_format: aws.osml.gdal.GDALImageFormats) -> str

   Obtain the meta-type based on the given tile format.

   :param tile_format: GDAL Image format associated with the tile.

   :return: The associated image format in plain text.


.. py:function:: get_standard_overviews(width: int, height: int, preview_size: int) -> List[int]

   This utility computes a list of reduced resolution scales that define a standard image pyramid for a given
   image and desired final preview size.

   :param width: Width of the full image at the highest resolution.
   :param height: Height of the full image at the highest resolution.
   :param preview_size: The desired size of the lowest resolution / thumbnail image.
   :return: The list of scale factors needed for each level in the tile pyramid, e.g. [2, 4, 8, 16 ...]


.. py:function:: get_tile_factory_pool(tile_format: aws.osml.gdal.GDALImageFormats, tile_compression: aws.osml.gdal.GDALCompressionOptions, local_object_path: str, output_type: Optional[int] = None, range_adjustment: aws.osml.gdal.RangeAdjustmentType = RangeAdjustmentType.NONE) -> TileFactoryPool

   Create and return a pool of tile factories.

   :param tile_format: The format of the tiles to be created.
   :param tile_compression: The compression options for the tiles.
   :param local_object_path: The path to the local object storage.
   :param output_type: The optional output type for the tiles.
   :param range_adjustment: The range adjustment type for the tiles.
   :return: The tile factory pool.



.. py:function:: perform_gdal_translation(dataset: osgeo.gdal.Dataset, gdal_options: Dict) -> Optional[bytearray]

   Perform GDAL translation on a dataset with given GDAL options.

   :param dataset: The input GDAL dataset to be translated.
   :param gdal_options: Options for the GDAL translation.
   :return: A bytearray containing the translated data, or None if translation fails.


