tile_server.services
====================

.. py:module:: tile_server.services


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/tile_server/services/aws_services/index
   /autoapi/tile_server/services/database/index
   /autoapi/tile_server/services/queue/index
   /autoapi/tile_server/services/token/index


Classes
-------

.. autoapisummary::

   tile_server.services.AwsServices
   tile_server.services.RefreshableBotoSession
   tile_server.services.DecimalEncoder
   tile_server.services.ViewpointStatusTable
   tile_server.services.ViewpointRequestQueue


Functions
---------

.. autoapisummary::

   tile_server.services.get_aws_services
   tile_server.services.get_encryptor
   tile_server.services.initialize_token_key
   tile_server.services.read_token_key


Package Contents
----------------

.. py:class:: AwsServices(ddb: boto3.resources.base.ServiceResource = None, s3: boto3.resources.base.ServiceResource = None, sqs: boto3.resources.base.ServiceResource = None)

   .. py:method:: initialize_ddb(session: boto3.Session) -> boto3.resources.base.ServiceResource
      :staticmethod:


      Initialize DynamoDB service and return a service resource.

      :param: session: The credential session to use for the ServiceResource.
      :return: DynamoDB service resource for consumption.



   .. py:method:: initialize_s3(session: boto3.Session) -> boto3.resources.base.ServiceResource
      :staticmethod:


      Initialize S3 service and return a service resource.

      :param: session: The credential session to use for the ServiceResource.
      :return: S3 service resource for consumption.



   .. py:method:: initialize_sqs(session: boto3.Session) -> boto3.resources.base.ServiceResource
      :staticmethod:


      Initialize SQS service and return a service resource.

      :param: session: The credential session to use for the ServiceResource.
      :return: SQS service resource for consumption.



.. py:class:: RefreshableBotoSession

   RefreshableBotoSession is a Boto3 helper class that allows for the creation of a refreshable session such that none
   of the client/resources we want to call against will expire.


   .. py:attribute:: sts_arn


   .. py:attribute:: session_name
      :value: 'TileServerSession'



   .. py:attribute:: session_duration
      :value: 3600



   .. py:method:: _refresh() -> Dict[str, str]

      Refresh the AWS credentials for the current session.

      :return: Session credentials that were refreshed.



   .. py:method:: refreshable_session() -> boto3.Session

      Create a refreshable session which will automatically renew credentials when the credential expired.

      :return: Refreshable credentials session to use for the task user.



.. py:function:: get_aws_services() -> AwsServices

.. py:class:: DecimalEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)

   Bases: :py:obj:`json.JSONEncoder`


   This is a helper class that extends json.JSONEncoder.
   It's used to convert all Decimal instances to int
   when we fetch data from DynamoDB (which can return some items as Decimal).

   :param json.JSONEncoder: Inherited JSON Encoder class from json module.


   .. py:method:: default(obj)

      Overriden default method from JSONEncoder class.
      Converts all Decimal instances to int else returns default conversion.

      :param obj: Object for JSON Encoding.
      :return: Integer representation of Decimal else default JSON Conversion.



.. py:class:: ViewpointStatusTable(aws_ddb: boto3.resources.base.ServiceResource, logger: logging.Logger = getLogger(__name__))

   A class used to represent the ViewpointStatusTable.


   .. py:attribute:: ddb


   .. py:attribute:: table


   .. py:attribute:: logger


   .. py:method:: get_viewpoints(limit: int = None, next_token: str = None) -> aws.osml.tile_server.models.ViewpointListResponse

      Get viewpoint items from the dynamodb table, if limit nor next_token are provided, it returns all records.

      :param limit: Optional max number of viewpoints requested from dynamodb.
      :param next_token: Optional token to begin a query from provided by the previous query response that
              had more records available.
      :return: The list of available viewpoints in the table.



   .. py:method:: get_all_viewpoints(query_params: Dict) -> aws.osml.tile_server.models.ViewpointListResponse

      Get all the viewpoint items from the dynamodb table.

      :param: query_params: A query to get all the viewpoints from the table.
      :return: A list of all the viewpoints found in the table.



   .. py:method:: get_paged_viewpoints(query_params: Dict) -> aws.osml.tile_server.models.ViewpointListResponse

      Get a page of viewpoint items from the dynamodb table.

      :param: The query parameters to use for constructing the page of viewpoints.
      :return: Page of viewpoints associated with the query parameters.



   .. py:method:: get_viewpoint(viewpoint_id: str) -> aws.osml.tile_server.models.ViewpointModel

      Get detail of a viewpoint based on a given viewpoint id from the table.

      :param viewpoint_id: The viewpoint_id you want to get from the table.
      :return: Viewpoint details associated with the requested viewpoint_id.
      :raises: HTTPException if it cannot fetch a viewpoint item from the ViewpointStatusTable.



   .. py:method:: create_viewpoint(viewpoint_request: aws.osml.tile_server.models.ViewpointModel) -> Dict

      Create a viewpoint item and store them in a DynamoDB table.

      :param viewpoint_request: The provided request to create a new viewpoint in the table.
      :return: Details of the newly created viewpoint item.
      :raises: HTTPException if it cannot create a viewpoint item from the ViewpointStatusTable.




   .. py:method:: update_viewpoint(viewpoint_item: aws.osml.tile_server.models.ViewpointModel) -> aws.osml.tile_server.models.ViewpointModel

      Update viewpoint item in a dynamodb table.

      :param viewpoint_item: Viewpoint item to be updated in the table.
      :return: Updated viewpoint item in the table.
      :raises: HTTPException if it cannot update a viewpoint item from the ViewpointStatusTable.




   .. py:method:: delete_viewpoint(viewpoint_id: str) -> str

      Delete a viewpoint from the DynamoDB table.

      :param viewpoint_id: The ID of the viewpoint to be deleted.
      :return: the viewpoint_id of the deleted viewpoint.
      :raises HTTPException: If an error occurs while deleting the viewpoint.



   .. py:method:: get_update_params(body: Dict) -> Tuple[str, Dict[str, Any]]
      :staticmethod:


      Generate an update expression and a dict of values to update a dynamodb table.

      :param body: Body of the request that contains the updated data.
      :return: Generated update expression and attributes.



.. py:class:: ViewpointRequestQueue(aws_sqs, queue_name: str, logger: logging.Logger = getLogger(__name__))

   A class used to represent the ViewpointRequestQueue.


   .. py:attribute:: sqs_client


   .. py:attribute:: queue


   .. py:attribute:: logger


   .. py:method:: send_request(request: Dict, attributes: Dict = None) -> None

      Send the message to an associated SQS queue.

      :param request: A JSON request to assign the SQS message sent.
      :param attributes: An optional set of attributes to attach to the message.
      :return: None



.. py:function:: get_encryptor() -> cryptography.fernet.Fernet

   This initializes a token and returns the associated Fernet object.
   If a token is already present a new one is not created.

   :return:


.. py:function:: initialize_token_key() -> None

   Initializes and stores a new encryption token key in a JSON file if one does not already exist.

   :return: None


.. py:function:: read_token_key() -> Optional[bytes]

   Reads and returns the encryption token key from a JSON file.

   :return: The encryption token key as a dictionary if the file exists and contains valid JSON, None otherwise.


